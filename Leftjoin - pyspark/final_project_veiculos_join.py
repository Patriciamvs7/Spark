# -*- coding: utf-8 -*-
"""final_project_veiculos_join.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o24a-0RyWGmMh0h4Ta4xuuG_0RfGhCV8

#INSTALAÇÃO E IMPORTAÇÃO DE BIBLIOTECAS#
"""

!pip install pyspark

!pip install gcsfs

!pip install pymongo

from pyspark.sql import SparkSession
import pyspark.sql.functions as F
import pandas as pd
import numpy as np
from pyspark.sql.types import IntegerType, FloatType, DoubleType
import seaborn as sns
import warnings
from google.cloud import storage
import os
import matplotlib.pyplot as plt
import pymongo
from pymongo import MongoClient
warnings.filterwarnings("ignore")

#montando um drive, para ter acesso a chave do GCP
from google.colab import drive
drive.mount('/content/drive')

"""#CONFIGURAÇÕES#"""

#CONFIGURAR A CHAVE do google cloud
serviceAccount = 'chave_conexão_google'
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = serviceAccount

#Acessando a bucket criada
client = storage.Client()

bucket = client.get_bucket('projetofinal1')

bucket.blob('autoveiculos_total.json')

#Criando uma sessão spark
spark = (SparkSession.builder
                     .master('local')
                     .appName('veiculos')
                     .config('spark.ui.port', '4050')
                     .config("spark.jars", 'https://storage.googleapis.com/hadoop-lib/gcs/gcs-connector-hadoop2-latest.jar')
                     .getOrCreate())

#conectando o python ao mongo
uri = "mongodb+srv://clustere5.wjshwzt.mongodb.net/?authSource=%24external&authMechanism=MONGODB-X509&retryWrites=true&w=majority"
client = MongoClient(uri,
                     tls=True,
                     tlsCertificateKeyFile='chave_mongo.pem',
                     )
db = client['prod_venda_join']
intermediario = db['intermediario']



"""#EXTRAÇÃO#

Extraindo os 6 datasets referentes a produção e vendas de automoveis alocadas na pasta brutos do bucket (datalake)
"""

df_venda_autoveiculos_total = (
    spark.read
         .format('json')
         .option('delimiter', ',')
         .option('header', 'true')
         .option('inferschema', 'true')
         .option('encoding','utf-8')
         .option('escape','"')
         .load('gs://projetofinal1/brutos/autoveiculos_total.json')
)

df_venda_comerciais_conces = (
    spark.read
         .format('csv')
         .option('delimiter', ';')
         .option('header', 'true')
         .option('inferschema', 'true')
         .option('encoding','utf-8')
         .option('escape','"')
         .load('gs://projetofinal1/brutos/comerciaisLeves_concessionarias.csv')
)

df_venda_total_conces = (
    spark.read
         .format('json')
         .option('delimiter', ',')
         .option('header', 'true')
         .option('inferschema', 'true')
         .option('encoding','utf-8')
         .option('escape','"')
         .load('gs://projetofinal1/brutos/total_concessionarias.json')
)

df_prod_automoveis = (
    spark.read
         .format('csv')
         .option('delimiter', ';')
         .option('header', 'true')
         .option('inferschema', 'true')
         .option('encoding','utf-8')
         .option('escape','"')
         .load('gs://projetofinal1/brutos/prod_automoveis.csv')
)

df_prod_total_autoveiculos = (
    spark.read
         .format('csv')
         .option('delimiter', ';')
         .option('header', 'true')
         .option('inferschema', 'true')
         .option('encoding','utf-8')
         .option('escape','"')
         .load('gs://projetofinal1/brutos/producao_total_auto.csv')
)

df_vendas_merc_Interno = (
    spark.read
         .format('csv')
         .option('delimiter', ';')
         .option('header', 'true')
         .option('inferschema', 'true')
         .option('encoding','utf-8')
         .option('escape','"')
         .load('gs://projetofinal1/brutos/vendas_merc_Interno.csv')
)

"""#Backups#"""

df_backup_vendas_inter = df_vendas_merc_Interno

df__backup_prod_total_autoveiculos = df_prod_total_autoveiculos

df_backup_prod_automoveis = df_prod_automoveis

df_backup_venda_total_conces = df_venda_total_conces

df_backup_venda_comerciais_conces = df_venda_comerciais_conces

df_backup_venda_autoveiculos_total = df_venda_autoveiculos_total

"""#ANALISE EXPLORATÓRIA DOS DADOS#"""

df_prod_automoveis.show()

df_prod_total_autoveiculos.show()

df_venda_autoveiculos_total.show()

df_venda_comerciais_conces.show()

df_vendas_merc_Interno.show()

df_vendas_merc_Interno.count()

df_vendas_merc_Interno.drop_duplicates().count()

df_venda_total_conces.count()

df_venda_total_conces.drop_duplicates().count()

df_prod_automoveis.count()

df_prod_automoveis.drop_duplicates().count()

df_venda_autoveiculos_total.count()

df_venda_autoveiculos_total.drop_duplicates().count()

df_venda_comerciais_conces.count()

df_venda_comerciais_conces.drop_duplicates().count()

df_venda_autoveiculos_total.show()

df_vendas_merc_Interno.show()

df_venda_comerciais_conces.printSchema()

df_venda_total_conces.printSchema()

df_venda_autoveiculos_total.printSchema()

df_vendas_merc_Interno.printSchema()

df_prod_automoveis.printSchema()

df_prod_total_autoveiculos.printSchema()

df_vendas_merc_Interno.toPandas().isna().any()

df_venda_autoveiculos_total.toPandas().isna().any()

df_venda_comerciais_conces.toPandas().isna().any()

df_prod_automoveis.toPandas().isna().any()

df_prod_total_autoveiculos.toPandas().isna().any()

"""#Transformação#"""

df_prod_total_autoveiculos.withColumn('data', F.to_date('data','dd/MM/yyyy')).show(3)

#Convertendo o campo data para o formato date 
df_prod_total_autoveiculos = df_prod_total_autoveiculos.withColumn('data', F.to_date('data','dd/MM/yyyy'))

df_prod_total_autoveiculos.show(3)

df_prod_total_autoveiculos.printSchema()

#Renomeando o campo valor para melhor identificação do campo após realizar o join
df_prod_total_autoveiculos = df_prod_total_autoveiculos.withColumnRenamed('valor', 'Producao_Autoveiculos_total')

df_prod_total_autoveiculos.show(3)

"""Renomeando o campo valor para melhor identificação do campo após realizar o join e convertenda a data"""

df_prod_automoveis = df_prod_automoveis.withColumn('data', F.to_date('data','dd/MM/yyyy'))

df_prod_automoveis = df_prod_automoveis.withColumnRenamed('valor', 'Producao_Automoveis')

df_prod_automoveis.show(3)

"""Renomeando o campo valor para melhor identificação do campo após realizar o join e convertenda a data"""

df_venda_autoveiculos_total = df_venda_autoveiculos_total.withColumn('data', F.to_date('data','dd/MM/yyyy'))

df_venda_autoveiculos_total = df_venda_autoveiculos_total.withColumnRenamed('valor', 'valorVendas_autoveiculosTotal')

df_venda_autoveiculos_total.show(3)

df_venda_comerciais_conces = df_backup_venda_total_conces

df_venda_comerciais_conces.printSchema()

"""Renomeando o campo valor para melhor identificação do campo após realizar o join e convertenda a data"""

df_venda_comerciais_conces = df_venda_comerciais_conces.withColumn('data', F.to_date('data','dd/MM/yyyy'))

df_venda_comerciais_conces = df_venda_comerciais_conces.withColumnRenamed('valor', 'valorVendas_ConcesComerciais')

df_venda_comerciais_conces.printSchema()

df_venda_comerciais_conces.show(3)

"""Renomeando o campo valor para melhor identificação do campo após realizar o join e convertenda a data"""

df_vendas_merc_Interno = df_vendas_merc_Interno.withColumn('data', F.to_date('data','dd/MM/yyyy'))

df_vendas_merc_Interno = df_vendas_merc_Interno.withColumnRenamed('valor', 'valorVendas_mercadoInterno')

df_vendas_merc_Interno.show(3)

df_venda_total_conces.show(3)

"""Renomeando o campo valor para melhor identificação do campo após realizar o join e convertenda a """

df_venda_total_conces = df_venda_total_conces.withColumn('data', F.to_date('data','dd/MM/yyyy'))

df_venda_total_conces = df_venda_total_conces.withColumnRenamed('valor', 'valorVendas_concesTotal')

df_venda_total_conces.printSchema()

df_venda_total_conces.show(10)

df_venda_comerciais_conces.show(10)

df_vendas_merc_Interno.count()

df_venda_total_conces.count()

df_venda_comerciais_conces.count()

df_venda_autoveiculos_total.count()

df_prod_automoveis.count()

df_prod_total_autoveiculos.count()

"""Realizando o join dos dataframes, iniciando o df com maior número de linhas para o menor"""

df_join = df_vendas_merc_Interno.join(df_prod_total_autoveiculos, on=['data'], how='left')

df_join = df_join.join(df_venda_autoveiculos_total, on=['data'], how='left')

df_join = df_join.join(df_prod_automoveis, on=['data'], how='left')

df_join = df_join.join(df_venda_total_conces, on=['data'], how='left')

df_join = df_join.join(df_venda_comerciais_conces, on=['data'], how='left')

df_join.show(3)

df_join = df_join.join(df_prod_automoveis, on=['data'], how='left')

df_join.show(3)

df_join.printSchema()

df_join.where(F.col('data') == '2015-01-01').show()

df_join = df_join.withColumnRenamed('valor', 'valorVendas_autoveiculosTotal')

"""#CARREGAMENTO#"""

#Salvando o DataFrame em um arquivo CSV
df_join.write.format("csv").option("header", "true").mode("overwrite").save("gs://projetofinal1/temp/vendas_prod_veiculos.csv")

